#!/bin/bash

# Inspired greatly by Armin Ronacher's bashrc
# https://github.com/mitsuhiko/dotfiles/blob/master/bash/bashrc

# If not running interactively, don't do anything
[[ -z "$PS1" ]] && return

DEFAULT_COLOR="[00;1m"
GRAY_COLOR="[37;1m"
PINK_COLOR="[35;1m"
GREEN_COLOR="[32;1m"
CYAN_COLOR="[36;1m"
ORANGE_COLOR="[33;1m"
RED_COLOR="[31;1m"
if [[ `id -u` == '0' ]]; then
  USER_COLOR=$RED_COLOR
else
  USER_COLOR=$ORANGE_COLOR
fi

# detect os/terminal
IS_MACOS=false
IS_WSL=false
if [[ "$OSTYPE" == "darwin" ]]; then
    IS_MACOS=true
fi
if [[ $(cat /proc/version | grep microsoft) ]]; then
    IS_WSL=true
fi

VCPROMPT_EXECUTABLE=/usr/local/bin/vcprompt

function vcprompt() {
  if [[ -e "$VCPROMPT_EXECUTABLE" ]]; then
    $VCPROMPT_EXECUTABLE -f $' on \033[1;34m%n\033[00;1m:\033[0;37m%[unknown]b\033[32;1m%m%u'
  fi
}

function lastcommandfailed() {
  code=$?
  if [[ $code != 0 ]]; then
    echo -n $'\033[37;1m exited \033[31;1m'
    echo -n $code
    echo -n $'\033[37;1m'
  fi
}

function backgroundjobs() {
  jobs|python -c 'if 1:
    import sys
    items = ["\033[36;1m%s\033[37;1m" % x.split()[2]
             for x in sys.stdin.read().splitlines()]
    if items:
      if len(items) > 2:
        string = "%s, and %s" % (", ".join(items[:-1]), items[-1])
      else:
        string = ", ".join(items)
      print("\033[37;1m running %s" % string)
  '
}

function activevirtualenv() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
      echo -n $'\033[00;1m:\033[36;1m'
      echo -n "$(basename $VIRTUAL_ENV)"
  fi
}

# export BASEPROMPT='\e${USER_COLOR}\u \
# \e${GRAY_COLOR}at \e${ORANGE_COLOR}\h \
# \e${GRAY_COLOR}$(vcprompt)\
# \e${GRAY_COLOR}in \e${GREEN_COLOR}\w\
# `backgroundjobs`\
# \e${DEFAULT_COLOR}'
export BASEPROMPT='\n\e${USER_COLOR}\u\
`activevirtualenv` \
\e${GRAY_COLOR}in \e${GREEN_COLOR}\w\
\e${GRAY_COLOR}$(vcprompt)\
\e${DEFAULT_COLOR}'

if [[ $IS_MACOS || $IS_WSL ]]; then
  export BASEPROMPT='\n\e${USER_COLOR}\u\
`activevirtualenv` \
\e${GRAY_COLOR}in \e${GREEN_COLOR}\w\
\e${GRAY_COLOR}`vcprompt`\
\e${DEFAULT_COLOR}'
else
  export BASEPROMPT='\n\e${USER_COLOR}\u\
`activevirtualenv` \
\e${GRAY_COLOR}at \e${ORANGE_COLOR}\h \
\e${GRAY_COLOR}in \e${GREEN_COLOR}\w\
\e${GRAY_COLOR}`vcprompt`\
\e${DEFAULT_COLOR}'
fi

export ARCHFLAGS='-arch i386 -arch x86_64'

export PROMPT="${BASEPROMPT}
$ "
export PS1=$PROMPT

export TERM=xterm-color
# TODO: this is deprecated
# export GREP_OPTIONS='--color=auto' GREP_COLOR='1;32'

export CLICOLOR=1
if [[ $IS_MACOS ]]; then
  export LSCOLORS=ExGxFxDxCxHxHxCbCeEbEb
  export LC_CTYPE=en_US.utf-8
  alias free=tfree
else
  alias ls='ls --color=auto'
fi

export SCREENSHOTS_PATH=~/Documents/Screenshots

export IGNOREEOF=1
export LESS=FRSX

export EDITOR=nano
export PYOPEN_CMD=subl
export SVN_EDITOR=$EDITOR
export GIT_EDITOR=$SVN_EDITOR

export LIBTOOLIZE=glibtoolize

export PATH=./node_modules/.bin:$HOME/.rvm/bin:/usr/local/share/npm/bin:~/node_modules/.bin:~/pear/bin:~/.bin:/usr/local/bin:/usr/local/sbin:$PATH
export GOPATH=~/Development/go

# python
export PYTHONDONTWRITEBYTECODE=1
export PYTHONSTARTUP="$HOME/.pythonrc.py"

# virtualenvwrapper and pip
if [[ `id -u` != '0' ]]; then
  export VIRTUAL_ENV_DISABLE_PROMPT=1
  export VIRTUALENV_USE_DISTRIBUTE=1
  export WORKON_HOME=$HOME/.virtualenvs
  export PIP_VIRTUALENV_BASE=$WORKON_HOME
  export PIP_REQUIRE_VIRTUALENV=true
  export PIP_RESPECT_VIRTUALENV=true
  #export PIP_USE_MIRRORS=true
  if [[ -e "/usr/local/bin/virtualenvwrapper.sh" ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
  fi
fi

# Enable hub (GitHub CLI)
if [[ -e $(which hub) ]]; then
  alias git=hub
fi

# Enable bash history
export HISTCONTROL=erasedups
export HISTSIZE=5000
shopt -s histappend

export FALLBACK_DYLD_LIBRARY_PATH=/usr/local/lib

# we always pass these to ls(1)
LS_COMMON="-hBG"

# setup the main ls alias if we've established common args
test -n "$LS_COMMON" &&
alias ls="command ls $LS_COMMON"

# These set up/down to do the history searching
bind '"\e[A"':history-search-backward
bind '"\e[B"':history-search-forward

alias ..='cd ..'

alias edit='$EDITOR $@'

alias pgsql_start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pgsql_stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias es_start='launchctl stop org.elasticsearch'
alias es_stop='launchctl start org.elasticsearch'

alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"

alias scpresume='rsync --partial --progress --progress --stats'

alias vag='vagrant $@'

function tfree() {
  top -l1 -s0 | head -n11
}

if [[ $IS_MACOS ]]; then
  mkdir -p $SCREENSHOTS_PATH
  defaults write com.apple.screencapture location $SCREENSHOTS_PATH
fi

if [[ -e "$HOME/.local-bashrc" ]]; then
  source "$HOME/.local-bashrc"
fi

# Use git-completion if available
if [[ -e "$HOME/.git-completion.bash" ]]; then
  source "$HOME/.git-completion.bash"
fi

# Use bash-completion, if available
if [[ -f /etc/bash_completion ]]; then
  source /etc/bash_completion
fi

if [[ -f /usr/local/etc/bash_completion ]]; then
  source /usr/local/etc/bash_completion
fi

# GRC support
if [[ $IS_MACOS ]]; then
  grc_bash="`brew --prefix grc`/etc/grc.bashrc"
  if [ -e "$grc_bash" ]; then
    source "$grc_bash"
  fi;
fi;


[[ -s ~/.rvm/scripts/rvm ]] && source ~/.rvm/scripts/rvm  # This loads RVM into a shell session.

# NVM
[[ -s /usr/local/opt/nvm/nvm.sh ]] && source /usr/local/opt/nvm/nvm.sh
export NVM_DIR="$HOME/.nvm"

export CHEF_USER=zeeg

# AWS tooling
export EC2_HOME="/usr/local/Cellar/ec2-api-tools/1.6.12.0/libexec"
export AWS_RDS_HOME="/usr/local/Cellar/rds-command-line-tools/1.12.002/libexec"

if [[ -e /usr/libexec/java_home ]]; then
  export JAVA_HOME="$(/usr/libexec/java_home)"
fi


function highlight-it {
 pbpaste -Prefer txt | pygmentize -f rtf -O 'ensurenl=False,style=tango,fontface=Operator Mono Book,fontsize=84' -l "$1" | pbcopy
}

if [[ -d /usr/local/etc/bash_completion.d ]]; then
  source /usr/local/etc/bash_completion.d/*
fi

test -e ${HOME}/.iterm2_shell_integration.bash && source ${HOME}/.iterm2_shell_integration.bash

# I dont care enough to figure this out right now
export CRYPTOGRAPHY_ALLOW_OPENSSL_098=1

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/dcramer/google-cloud-sdk/path.bash.inc' ]; then
    source '/Users/dcramer/google-cloud-sdk/path.bash.inc'
fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/dcramer/google-cloud-sdk/completion.bash.inc' ]; then
    source '/Users/dcramer/google-cloud-sdk/completion.bash.inc'
fi

if [[ -e $(which pyenv) ]]; then
    echo "Initializing pyenv"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

if [[ -e $(which direnv) ]]; then
    echo "Initializing direnv"
    eval "$(direnv hook bash)"
fi

SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initializing new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi
